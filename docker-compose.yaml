version: '3.9'

services:
  php:
    build:
      context: .
      dockerfile: .docker/php-fpm/Dockerfile
      args:
        APP_ENV: ${APP_ENV}
    container_name: php
    restart: always
    volumes:
      - ./:/app
    environment:
      APP_KEY: ${APP_KEY}
    depends_on:
      - mysql
    networks:
      - exemple-api
    command: >
      sh -c "git config --global --add safe.directory /app && php-fpm"

  nginx:
    build:
      context: .
      dockerfile: .docker/nginx/Dockerfile
    container_name: nginx
    restart: always
    volumes:
      - ./:/app
    ports:
      - "${NGINX_PORT_TWO}:${NGINX_PORT}"
    depends_on:
      - php
    networks:
      - exemple-api

  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: ${REDIS_PORT}
    networks:
      - exemple-api

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    volumes:
      - .docker/mysql/data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT_TWO}:${DB_PORT}"
    networks:
      - exemple-api

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    ports:
      - "${FORWARD_PHPMYADMIN_PORT:-8082}:80"
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    depends_on:
      - mysql
    networks:
      - exemple-api

  npm:
    image: node:current-alpine
    container_name: npm
    working_dir: /app
    volumes:
      - ./:/app
    entrypoint: [ "tail", "-f", "/dev/null" ]
    networks:
      - exemple-api

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    restart: always
    ports:
      - "${FORWARD_MAILHOG_PORT:-1025}:1025"
      - "${FORWARD_MAILHOG_DASHBOARD_PORT:-8025}:8025"
    networks:
      - exemple-api

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    ports:
      - "${PORTAINER_PORT}:${PORTAINER_PORT_TWO}"
    environment:
      - TZ=${TIME_ZONE}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - .docker/portainer:/data
    networks:
      - exemple-api

networks:
  exemple-api:
    driver: bridge

volumes:
  pgadmin:
